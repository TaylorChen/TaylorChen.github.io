<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-08-09T22:17:22+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">TayloyChen Blog</title><subtitle>这里是 TayloyChen 的个人博客，与你一起发现更大的世界 | 要做一个有 ikigai 的程序员</subtitle><entry><title type="html">关于AI应用的思考</title><link href="http://localhost:4000/ai/2025/08/02/%E5%85%B3%E4%BA%8EAI%E5%BA%94%E7%94%A8%E7%9A%84%E6%80%9D%E8%80%83.html" rel="alternate" type="text/html" title="关于AI应用的思考" /><published>2025-08-02T00:00:00+08:00</published><updated>2025-08-02T00:00:00+08:00</updated><id>http://localhost:4000/ai/2025/08/02/%E5%85%B3%E4%BA%8EAI%E5%BA%94%E7%94%A8%E7%9A%84%E6%80%9D%E8%80%83</id><content type="html" xml:base="http://localhost:4000/ai/2025/08/02/%E5%85%B3%E4%BA%8EAI%E5%BA%94%E7%94%A8%E7%9A%84%E6%80%9D%E8%80%83.html"><![CDATA[<h2 id="关于ai应用的思考">关于AI应用的思考</h2>

<h3 id="与ia共创">与IA共创</h3>
<h4 id="1-梯人纵发展">1. 梯人纵发展</h4>
<p>目前的速度AI工具及应用层出不穷，几乎每天都会有新的style出来，从应用的角度来看有点应接不暇。从单纯的chat聊天模式开始，会发现有一部分的内容AI其实处理的不是很好，即使用到了一些先进的prompt词也不一定会有效果。这个可以想象AI技术能力的提升也是依赖于海量的知识数据，如果现行互联网的数据维持在一个相对静态的状态下，单纯靠AI在此基础上升华创造，不是说不肯能，只是需要的时间会更长。其实反过来如果在AI的加持下，通过人类的思维创造出更高维度的知识或者解决问题的思路，把这些方式公开到网络上，让AI进行提取学习，可能这种发展离真正的“智能”会更近一步。这种模式就是左脚踩右脚的模式，一步步靠近终极目标方向。</p>

<h4 id="2-企业应用ai-accessibility">2. 企业应用AI Accessibility</h4>
<p>现在AI应用无处不在，日常文案的优化、生活和工作中遇到问题会先用AI进行科普扫盲、AI Coding、代码review、调研报告等。但是可以看看真正企业与AI的结合程度如何？按照目前阶段来说还在初级阶段，目前使用的模型都是基于现有公开的网络的数据进行训练的，那么对于企业本身的数据在公网是无法被访问到的，这里面包括企业运过程中产生的数据、文档、知识库、业务领域知识、企业文化、日常工作流程等。</p>

<p><strong>成本角度</strong></p>
<blockquote>
  <p>大多数企业不太可能基于开源的模型进行训练自己的私有模型，这个训练时需要额外的开销。当然大公司或者一些医院机构在使用AI的时候，会考虑用模型进行训练，给AI投喂的都是私有数据，在这种情况下进行使用的。</p>
</blockquote>

<p><strong>安全角度</strong></p>
<blockquote>
  <p>数据安全是目前企业考虑的一个方面，担心敏感隐私数据泄漏。这也是目前AI与企业业务结合相对慢的一个原因。这个当时也是可以解决的，就是把敏感数据排除在外进行脱敏处理，再让AI访问。</p>
</blockquote>

<p>从未来的角度看，如果那一天公司的相关数据能够被AI学习，那么有一天可能会出现的几个场景如下：</p>
<ol>
  <li>企业文化深度融入AI，大家日常工作中的行为、态度如果做的有不符合企业文化方面，系统会通过即时通讯工具进行提醒、在做决策时如果违反企业文化同样会被提醒，并给出对应的解决方案。</li>
  <li>在软件研发时当一套方案出来时，AI会结合历史业务、业务代码、产品文档、知识库等直接给出方案是否可行（给打一个分），对于决策者只需要根据AI给出的结论再一次思考及决策。</li>
  <li>日常的事物处理流程、会议形成、事情准备、日常团队沟通、培训这些，变成了AI每天或者提前规划一个人的事情，并给出重要性及优先级设定等。</li>
</ol>

<p><strong>以上虽然目前还做不到，但是在不久的将来一定会如期而至。</strong></p>

<h3 id="效率提升不等于生产力提升">效率提升不等于生产力提升</h3>
<h4 id="1-效率提升">1. 效率提升</h4>
<p>当前AI coding是发展的非常迅猛，几乎头部公司都在开源自己的模型，从AI coding 模型的演进、AI IDE、围绕产研环节的产品非常众多（从0到1打造一款产品）。甚至在早期在国外有一些团队只有几个人凭借AI产生出几倍的ROI（这不是噱头）。对于AI从业者来说，效率的确是提升了，以工作为例，效率提升后是不是会有一些空闲时间去做其它的事情。从工作和个人方面来说可以借此机会去触达AI目前还不能涉及到的方面，例如个人成长、个人能力提升、AI实践方法论、以及使用AI过程的盲点梳理。代码编写提升效率60%，项目单侧覆盖80%，这些是AI现阶段的强项，利用这些的时候多一些自己的思考见解。</p>

<h4 id="2-生产力提升">2. 生产力提升</h4>
<p>效率的提升对于单次产出的确很明显。但是如果需要从生产力提升方面将，还需要多探索。例如这种效率的提升是否可以产生规模效用，使用过程中的SOP是否具有通用性，是否可以复制。这次是AI Coding的提升，那么下一次是否可以从需求理解开始到最终的交付，这个过程中如何让AI参与80%以上，真正达到AI工具在”干苦力“，对于这个过程中的使用者来说就有更多精力花在项目稳定性、安全性、可拓展、以及技术架构演进，相当于把效率本身做了一次升华及放大。生产力提升的同时，对于AI使用者来说也是能力的升华及迭代，提升AI从业者的竞争力。</p>

<h3 id="使用技巧">使用技巧</h3>
<p>在日常Al使用时，可以使用过程中的问题分为两类，待解决问题库和已验证问题库。</p>
<h4 id="1-待解决问题库">1. 待解决问题库</h4>
<p>就是把工作中通过Al解决的，但是现在的模型还做不到的硬骨头，全部记下来，“例如根据这张草图直接生成可用代码”、“根据产品方案直接生成业务代码，达到可交付的目的”、“参考某款App的UI及业务进行复刻”等。</p>
<h4 id="2-已验证问题库">2. 已验证问题库</h4>
<p>把你那些能够用尽AI潜力的，好的提示次（prompt） 和 交互技巧分门别类记录好，方便下次继续使用。</p>

<p><strong>当新的模型发布之后，不要只光看测评、不要迷信测评，可以直接用待解决问题库的问题，扔给新模型或者新工具，看看之前的问题是否能够得到解决（是骡子是马拉出来溜溜）。</strong></p>]]></content><author><name></name></author><category term="AI" /><summary type="html"><![CDATA[关于AI应用的思考]]></summary></entry><entry><title type="html">Nginx Ingress 高并发场景优化实践</title><link href="http://localhost:4000/%E6%8A%80%E6%9C%AF/nginx/2025/07/01/Nginx-Ingress-%E9%AB%98%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5.html" rel="alternate" type="text/html" title="Nginx Ingress 高并发场景优化实践" /><published>2025-07-01T00:00:00+08:00</published><updated>2025-07-01T00:00:00+08:00</updated><id>http://localhost:4000/%E6%8A%80%E6%9C%AF/nginx/2025/07/01/Nginx-Ingress-%E9%AB%98%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5</id><content type="html" xml:base="http://localhost:4000/%E6%8A%80%E6%9C%AF/nginx/2025/07/01/Nginx-Ingress-%E9%AB%98%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5.html"><![CDATA[<p>在高并发/高吞吐场景下，Ingress-Nginx 的瓶颈往往在四处：连接与端口、文件句柄、握手与 TIME_WAIT、日志 I/O。本文给出值可直接落地的 Helm <code class="language-plaintext highlighter-rouge">values.yaml</code> 片段、Linux 内核参数、日志轮转 sidecar、压测与观测清单。</p>

<h2 id="1-云负载均衡clbnlb容量">1. 云负载均衡（CLB/NLB）容量</h2>
<ul>
  <li>选择性能容量型/增强型实例，并调高带宽上限；入口成为系统上限的概率远高于后端。</li>
  <li>自建 CLB 后通过注解/固定 <code class="language-plaintext highlighter-rouge">loadBalancerIP</code> 复用为 Ingress 入口。</li>
</ul>

<h2 id="2-linux-内核参数容器内以-initcontainer-动态设置">2. Linux 内核参数（容器内以 initContainer 动态设置）</h2>

<p>Helm <code class="language-plaintext highlighter-rouge">values.yaml</code>：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">controller</span><span class="pi">:</span>
  <span class="na">extraInitContainers</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">sysctl</span>
      <span class="na">image</span><span class="pi">:</span> <span class="s">busybox</span>
      <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">IfNotPresent</span>
      <span class="na">securityContext</span><span class="pi">:</span>
        <span class="na">privileged</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">command</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">sh</span>
        <span class="pi">-</span> <span class="s">-c</span>
        <span class="pi">-</span> <span class="pi">|</span>
          <span class="s">sysctl -w net.core.somaxconn=65535</span>
          <span class="s">sysctl -w net.ipv4.ip_local_port_range="1024 65535"</span>
          <span class="s">sysctl -w net.ipv4.tcp_tw_reuse=1</span>
          <span class="s">sysctl -w fs.file-max=1048576</span>
</code></pre></div></div>

<p>说明：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">somaxconn</code> 提升监听队列，缓解 SYN/accept 队列溢出。</li>
  <li><code class="language-plaintext highlighter-rouge">ip_local_port_range</code> 扩大源端口范围，降低端口耗尽风险。</li>
  <li><code class="language-plaintext highlighter-rouge">tcp_tw_reuse</code> 在客户端侧端口紧张时复用 TIME_WAIT（谨慎，仍以观测为准）。</li>
  <li><code class="language-plaintext highlighter-rouge">fs.file-max</code> 与容器 <code class="language-plaintext highlighter-rouge">ulimit</code>/<code class="language-plaintext highlighter-rouge">worker_rlimit_nofile</code> 对齐。</li>
</ul>

<h2 id="3-ingress-nginx-配置连接与工作线程">3. Ingress-Nginx 配置（连接与工作线程）</h2>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">controller</span><span class="pi">:</span>
  <span class="na">config</span><span class="pi">:</span>
    <span class="na">keep-alive-requests</span><span class="pi">:</span> <span class="s2">"</span><span class="s">1000"</span>                 <span class="c1"># client &lt;-&gt; ingress 单连接可承载请求数</span>
    <span class="na">upstream-keepalive-connections</span><span class="pi">:</span> <span class="s2">"</span><span class="s">2000"</span>      <span class="c1"># ingress &lt;-&gt; upstream 空闲长连接上限</span>
    <span class="na">max-worker-connections</span><span class="pi">:</span> <span class="s2">"</span><span class="s">65536"</span>             <span class="c1"># 每 worker 可开的最大连接数</span>
</code></pre></div></div>

<p>要点：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">keep-alive-requests</code> 过高可能导致扩容后负载不均；建议结合压测观察。</li>
  <li><code class="language-plaintext highlighter-rouge">upstream-keepalive-connections</code> 是空闲连接上限（非总连接数）；按 worker 数乘算总上限。</li>
</ul>

<h2 id="4-日志落盘与轮转降低高并发下-stdout-cpu-开销">4. 日志落盘与轮转（降低高并发下 stdout CPU 开销）</h2>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">controller</span><span class="pi">:</span>
  <span class="na">config</span><span class="pi">:</span>
    <span class="na">access-log-path</span><span class="pi">:</span> <span class="s">/var/log/nginx/nginx_access.log</span>
    <span class="na">error-log-path</span><span class="pi">:</span> <span class="s">/var/log/nginx/nginx_error.log</span>
  <span class="na">extraVolumes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">log</span>
      <span class="na">emptyDir</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="na">extraVolumeMounts</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">log</span>
      <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/var/log/nginx</span>
  <span class="na">extraContainers</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">logrotate</span>
      <span class="na">image</span><span class="pi">:</span> <span class="s">imroc/logrotate:latest</span>
      <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">IfNotPresent</span>
      <span class="na">env</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">LOGROTATE_FILE_PATTERN</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/var/log/nginx/nginx_*.log"</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">LOGROTATE_FILESIZE</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">100M"</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">LOGROTATE_FILENUM</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3"</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CRON_EXPR</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">*/1</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*"</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">CROND_LOGLEVEL</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">8"</span>
      <span class="na">volumeMounts</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">log</span>
          <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/var/log/nginx</span>
</code></pre></div></div>

<h2 id="5-端到端压测与观测">5. 端到端压测与观测</h2>
<ul>
  <li>压测：<code class="language-plaintext highlighter-rouge">wrk</code>（HTTP/1.x）、<code class="language-plaintext highlighter-rouge">h2load</code>（HTTP/2/3）、<code class="language-plaintext highlighter-rouge">vegeta/fortio</code>；建议 10–30 分钟稳定压测并观测收敛。</li>
  <li>指标：活动连接、连接错误、<code class="language-plaintext highlighter-rouge">$upstream_response_time</code> 分位数、5xx 率、<code class="language-plaintext highlighter-rouge">worker_connections</code> 使用率、TIME_WAIT 总数、端口使用率。</li>
  <li>日志：使用 JSON 格式，记录上游地址、上游时延、路由信息，便于定位热点与异常。</li>
</ul>

<h2 id="6-常见排障路径">6. 常见排障路径</h2>
<ul>
  <li>端口耗尽：增大 <code class="language-plaintext highlighter-rouge">ip_local_port_range</code>，提升上游 keepalive，排查异常关闭；观测 <code class="language-plaintext highlighter-rouge">ss -s</code>。</li>
  <li>队列溢出/5xx：调大 <code class="language-plaintext highlighter-rouge">somaxconn</code> 与 <code class="language-plaintext highlighter-rouge">backlog</code>，核查上游超时/重试策略，查丢包。</li>
  <li>CPU 飙升：stdout I/O 抖动，切换日志落盘+轮转；或减少日志字段。</li>
</ul>

<hr />

<p>参考链接：</p>
<ul>
  <li>高并发场景优化（外部实践指南）：<a href="https://imroc.cc/tke/networking/ingress-nginx/high-concurrency"><code class="language-plaintext highlighter-rouge">https://imroc.cc/tke/networking/ingress-nginx/high-concurrency</code></a></li>
</ul>]]></content><author><name></name></author><category term="技术" /><category term="Nginx" /><category term="技术" /><category term="Nginx" /><category term="Kubernetes" /><category term="并发" /><summary type="html"><![CDATA[在高并发/高吞吐场景下，Ingress-Nginx 的瓶颈往往在四处：连接与端口、文件句柄、握手与 TIME_WAIT、日志 I/O。本文给出值可直接落地的 Helm values.yaml 片段、Linux 内核参数、日志轮转 sidecar、压测与观测清单。]]></summary></entry><entry><title type="html">Nginx 零停机灰度发布与回滚策略</title><link href="http://localhost:4000/%E6%8A%80%E6%9C%AF/nginx/2025/06/28/Nginx-%E9%9B%B6%E5%81%9C%E6%9C%BA%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83%E4%B8%8E%E5%9B%9E%E6%BB%9A%E7%AD%96%E7%95%A5.html" rel="alternate" type="text/html" title="Nginx 零停机灰度发布与回滚策略" /><published>2025-06-28T00:00:00+08:00</published><updated>2025-06-28T00:00:00+08:00</updated><id>http://localhost:4000/%E6%8A%80%E6%9C%AF/nginx/2025/06/28/Nginx-%E9%9B%B6%E5%81%9C%E6%9C%BA%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83%E4%B8%8E%E5%9B%9E%E6%BB%9A%E7%AD%96%E7%95%A5</id><content type="html" xml:base="http://localhost:4000/%E6%8A%80%E6%9C%AF/nginx/2025/06/28/Nginx-%E9%9B%B6%E5%81%9C%E6%9C%BA%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83%E4%B8%8E%E5%9B%9E%E6%BB%9A%E7%AD%96%E7%95%A5.html"><![CDATA[<p>从运维架构视角，结合 Nginx 的多种路由能力（权重、Header/Cookie、子域名、子路径）与容器编排（Docker/Kubernetes），构建“低风险、可审计、可回滚”的上线流程。本文给出平滑发布步骤、生产级配置、容器化集成与回滚预案。</p>

<h2 id="0-目标与原则">0. 目标与原则</h2>
<ul>
  <li>不中断：对外 0 失败率、0 连接重置；</li>
  <li>可回滚：故障秒级回退；</li>
  <li>可观测：全链路指标与日志可追溯；</li>
  <li>可审计：变更有记录，可复现。</li>
</ul>

<hr />

<h2 id="1-平滑发布通用步骤">1. 平滑发布（通用步骤）</h2>
<p>1) 版本准备：构建 v2 镜像（含健康检查、版本信息接口），在 v1 旁路启动；
2) 预热：v2 只接入探活与预热流量（本地缓存、JIT、连接池预连接）；
3) 小流量灰度：按 1%/5%/10%/20%/50%/100% 切流，每步 5-15 分钟观察 SLI；
4) 监控门禁：4xx/5xx、P95/P99、错误率、特定业务 KPI（下单/支付成功率）；
5) 扩展面：流量达到 100% 后保持观察窗口（30-60 分钟）；
6) 收尾：下线 v1 或保留一段时间作为热备用。</p>

<blockquote>
  <p>SLI/SLO 建议：错误率 &lt; 0.1%，P95 &lt; 目标阈值（如 300ms），下单成功率不下降。</p>
</blockquote>

<hr />

<h2 id="2-nginx-路由策略">2. Nginx 路由策略</h2>
<h3 id="21-权重切流">2.1 权重切流</h3>
<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">upstream</span> <span class="s">svc_v1</span> <span class="p">{</span> <span class="kn">server</span> <span class="nf">10.0.0.1</span><span class="p">:</span><span class="mi">8080</span> <span class="s">max_fails=2</span> <span class="s">fail_timeout=10s</span><span class="p">;</span> <span class="p">}</span>
<span class="k">upstream</span> <span class="s">svc_v2</span> <span class="p">{</span> <span class="kn">server</span> <span class="nf">10.0.0.2</span><span class="p">:</span><span class="mi">8080</span> <span class="s">max_fails=2</span> <span class="s">fail_timeout=10s</span><span class="p">;</span> <span class="p">}</span>
<span class="k">map</span> <span class="nv">$upstream_choice</span> <span class="nv">$backend</span> <span class="p">{</span>
  <span class="kn">default</span>      <span class="s">svc_v1</span><span class="p">;</span>
  <span class="kn">v2</span>           <span class="s">svc_v2</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1"># 灰度权重由外部工具写入变量（例如 lua_shared_dict / env / include 片段）</span>
<span class="k">map</span> <span class="nv">$cookie_gray</span> <span class="nv">$upstream_choice</span> <span class="p">{</span>
  <span class="kn">default</span>      <span class="s">v1</span><span class="p">;</span>
  <span class="kn">~*gray=1</span>     <span class="s">v2</span><span class="p">;</span>  <span class="c1"># 指定用户灰度</span>
<span class="p">}</span>
<span class="k">server</span> <span class="p">{</span>
  <span class="kn">location</span> <span class="n">/</span> <span class="p">{</span>
    <span class="kn">proxy_next_upstream</span> <span class="s">error</span> <span class="s">timeout</span> <span class="s">http_502</span> <span class="s">http_503</span> <span class="s">http_504</span><span class="p">;</span> <span class="c1"># 故障向上游重试</span>
    <span class="kn">proxy_pass</span> <span class="s">http://</span><span class="nv">$backend</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="22-百分比灰度无-cookie">2.2 百分比灰度（无 Cookie）</h3>
<p>借助 Nginx JavaScript（njs）或 lua，按哈希实现稳定的百分比切分：</p>
<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 伪代码：基于 IP/用户ID 哈希到 0..99，&lt;10 命中 v2（10%）</span>
</code></pre></div></div>
<p>优势：用户命中稳定，不会在刷新间抖动；便于问题复现。</p>

<h3 id="23-子路径子域名灰度">2.3 子路径/子域名灰度</h3>
<ul>
  <li>子路径：<code class="language-plaintext highlighter-rouge">/v2/</code> 仅路由到 v2，便于 A/B 对比；</li>
  <li>子域名：<code class="language-plaintext highlighter-rouge">v2.api.example.com</code> 专供内测或机器人流量。</li>
</ul>

<hr />

<h2 id="3-容器化集成">3. 容器化集成</h2>
<h3 id="31-docker-compose蓝绿">3.1 Docker Compose（蓝/绿）</h3>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">services</span><span class="pi">:</span>
  <span class="na">nginx</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">nginx:1.25</span>
    <span class="na">volumes</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">./nginx.conf:/etc/nginx/nginx.conf:ro"</span><span class="pi">]</span>
    <span class="na">ports</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">80:80"</span><span class="pi">]</span>
  <span class="na">app_v1</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">app:1.0.0</span>
    <span class="na">healthcheck</span><span class="pi">:</span> <span class="pi">{</span> <span class="nv">test</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">CMD"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">curl"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">-f"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">http://localhost:8080/health"</span><span class="pi">],</span> <span class="nv">interval</span><span class="pi">:</span> <span class="nv">5s</span><span class="pi">,</span> <span class="nv">retries</span><span class="pi">:</span> <span class="nv">5</span> <span class="pi">}</span>
  <span class="na">app_v2</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">app:1.1.0</span>
    <span class="na">healthcheck</span><span class="pi">:</span> <span class="pi">{</span> <span class="nv">test</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">CMD"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">curl"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">-f"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">http://localhost:8080/health"</span><span class="pi">],</span> <span class="nv">interval</span><span class="pi">:</span> <span class="nv">5s</span><span class="pi">,</span> <span class="nv">retries</span><span class="pi">:</span> <span class="nv">5</span> <span class="pi">}</span>
</code></pre></div></div>
<ul>
  <li>切换方式：通过替换 <code class="language-plaintext highlighter-rouge">map</code> 变量/包含片段，或修改 upstream 指向容器服务名；</li>
  <li>回滚：即时切回 <code class="language-plaintext highlighter-rouge">app_v1</code>。</li>
</ul>

<h3 id="32-kubernetesingressservice">3.2 Kubernetes（Ingress/Service）</h3>
<ul>
  <li>Ingress-Nginx + 两个 Service（v1/v2），通过 <code class="language-plaintext highlighter-rouge">canary</code> 注解分流：
    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">metadata</span><span class="pi">:</span>
<span class="na">annotations</span><span class="pi">:</span>
  <span class="na">nginx.ingress.kubernetes.io/canary</span><span class="pi">:</span> <span class="s2">"</span><span class="s">true"</span>
  <span class="na">nginx.ingress.kubernetes.io/canary-weight</span><span class="pi">:</span> <span class="s2">"</span><span class="s">10"</span> <span class="c1"># 10%</span>
</code></pre></div>    </div>
  </li>
  <li>替代方案：使用 <code class="language-plaintext highlighter-rouge">nginx-ingress + njs/lua</code> 做更复杂的路由，或使用 <code class="language-plaintext highlighter-rouge">Gateway API</code>/<code class="language-plaintext highlighter-rouge">Service Mesh</code>（Istio/Linkerd）进行百分比灰度、熔断、重试与熔断。</li>
</ul>

<hr />

<h2 id="4-策略矩阵与适用场景">4. 策略矩阵与适用场景</h2>
<ul>
  <li>权重路由：最通用，适合整体灰度；</li>
  <li>Cookie 灰度：便于定向用户/业务方验证；</li>
  <li>Header 灰度：CI/CD/自动化探测流量；</li>
  <li>子路径/子域名：A/B 实验或大版本对照；</li>
  <li>哈希百分比：稳定命中，适合逐步放量。</li>
</ul>

<hr />

<h2 id="5-生产案例示意">5. 生产案例（示意）</h2>
<ul>
  <li>背景：交易系统网关，QPS 峰值 3w/s；</li>
  <li>步骤：
1) v2 部署完成，预热接口返回 200；
2) Cookie 灰度给内部账号与监控机器人；
3) 百分比灰度 1% -&gt; 5% -&gt; 10% -&gt; 20%（每步 10 分钟），观察错误率、P95、下单成功率；
4) 50% -&gt; 100%，保持观察 30 分钟；
5) 稳定后下线 v1，保留应急镜像与配置。</li>
  <li>指标与日志：接入 Prometheus/Grafana，日志落 ES/ClickHouse，保留版本号与路由信息便于追踪。</li>
</ul>

<hr />

<h2 id="6-回滚策略与演练">6. 回滚策略与演练</h2>
<ul>
  <li>触发条件：错误率 &gt; 0.2% 或 P95 恶化 30% 且持续 5 分钟；</li>
  <li>动作：
1) 立即将灰度比例设为 0（或 Cookie 开关关闭）；
2) 恢复 v1 权重至 100%；
3) 保持观察窗口（10-30 分钟），同时收集 v2 诊断材料；
4) 进入问题单流程与修复迭代；</li>
  <li>演练：季度至少一次“带压回滚”演练（非峰值时段），验证脚本与值守响应。</li>
</ul>

<hr />

<h2 id="7-关键配置清单">7. 关键配置清单</h2>
<ul>
  <li>上游健康检查与 <code class="language-plaintext highlighter-rouge">proxy_next_upstream</code> 策略；</li>
  <li><code class="language-plaintext highlighter-rouge">keepalive</code> 连接池，<code class="language-plaintext highlighter-rouge">proxy_http_version 1.1</code> 与关闭 <code class="language-plaintext highlighter-rouge">Connection: close</code>；</li>
  <li>请求超时/重试上限（避免风暴）；</li>
  <li>限流与熔断（njs/lua 或接入网关/Service Mesh）。</li>
</ul>

<hr />

<h2 id="8-审计与自动化">8. 审计与自动化</h2>
<ul>
  <li>配置即代码（Git 管控），灰度参数来自集中配置；</li>
  <li>CI/CD：合规检查（lint）、预热检查通过才允许放量；</li>
  <li>ChatOps：发布与回滚都有机器人宣告与记录。</li>
</ul>

<hr />

<h2 id="9-常见坑">9. 常见坑</h2>
<ul>
  <li>预热不足：v2 首次请求抖动；</li>
  <li>粘性策略缺失：会话跨版本导致登录/购物车异常；</li>
  <li>观测延迟太长：等到告警触发时已影响大量用户；</li>
  <li>权限与合规：回滚权限受限导致响应慢。</li>
</ul>

<blockquote>
  <p>结论：Nginx + 容器编排可实现高可靠的零停机灰度。把“参数化灰度 + 可观测 + 自动化回滚”做成流程与工具，才是长期可靠之道。</p>
</blockquote>]]></content><author><name></name></author><category term="技术" /><category term="Nginx" /><category term="技术" /><category term="Nginx" /><category term="发布" /><category term="灰度" /><summary type="html"><![CDATA[从运维架构视角，结合 Nginx 的多种路由能力（权重、Header/Cookie、子域名、子路径）与容器编排（Docker/Kubernetes），构建“低风险、可审计、可回滚”的上线流程。本文给出平滑发布步骤、生产级配置、容器化集成与回滚预案。]]></summary></entry><entry><title type="html">定期追更的项目</title><link href="http://localhost:4000/%E5%B7%A5%E5%85%B7/2025/05/13/%E5%85%85%E5%88%86%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7%E4%B9%8Bgithub.html" rel="alternate" type="text/html" title="定期追更的项目" /><published>2025-05-13T00:00:00+08:00</published><updated>2025-05-13T00:00:00+08:00</updated><id>http://localhost:4000/%E5%B7%A5%E5%85%B7/2025/05/13/%E5%85%85%E5%88%86%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7%E4%B9%8Bgithub</id><content type="html" xml:base="http://localhost:4000/%E5%B7%A5%E5%85%B7/2025/05/13/%E5%85%85%E5%88%86%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7%E4%B9%8Bgithub.html"><![CDATA[<h3 id="定期追更的项目">定期追更的项目：</h3>
<h4 id="1-weekly科技爱好者周刊">1. <a href="https://github.com/ruanyf/weekly">Weekly（科技爱好者周刊）</a></h4>
<h4 id="2-hellogithub月刊">2. <a href="https://github.com/521xueweihan/HelloGitHub/tree/master">《HelloGitHub》月刊</a></h4>

<h3 id="无边界的学习资料库">无边界的学习资料库</h3>
<h4 id="1-librarian-pku-北大全套课程资料">1. <a href="https://github.com/lib-pku/libpku">Librarian-pku 北大全套课程资料</a></h4>
<h4 id="2-清华大学计算机系课程攻略">2. <a href="https://github.com/PKUanonym/REKCARC-TSC-UHT">清华大学计算机系课程攻略</a></h4>
<h4 id="3-bilibili公开课目录">3. <a href="https://github.com/elder-frog/OpenCourseCatalog">BiliBili公开课目录</a></h4>
<h4 id="4-从小学到高中所有教材">4. <a href="https://github.com/TapXWorld/ChinaTextbook?tab=readme-ov-file">从小学到高中所有教材</a></h4>
<h4 id="5-各教育机构学习资源">5. <a href="https://github.com/mswnlz/edu-knowlege">各教育机构学习资源</a></h4>
<h4 id="6-感觉把中医的知识全放进去了推拿针灸啥的几十t应有尽有">6. <a href="https://github.com/mswnlz/chinese-traditional">感觉把中医的知识全放进去了，推拿针灸啥的，几十T，应有尽有</a></h4>
<h4 id="7-各种各种资料影视学习读书自媒体">7. <a href="https://github.com/mswnlz?tab=repositories">各种各种资料，影视、学习、读书、自媒体</a></h4>

<h3 id="神仙设计资源库">神仙设计资源库</h3>
<h4 id="1-design-resource">1. <a href="https://github.com/bradtraversy/design-resources-for-developers">design-resource</a></h4>
<h4 id="2-awesome-design-tools">2. <a href="https://github.com/goabstract/Awesome-Design-Tools">Awesome Design Tools</a></h4>
<h4 id="3-中国色彩">3. <a href="https://github.com/zerosoul/chinese-colors">中国色彩</a></h4>
<h4 id="4-字体得意黑smiley-sans">4. <a href="https://github.com/atelier-anchor/smiley-sans">字体[得意黑]Smiley Sans</a></h4>
<h4 id="5-白情包博物馆-chinesebqb">5. <a href="https://github.com/zhaoolee/ChineseBQB">白情包博物馆 ChineseBQB</a></h4>

<h3 id="不只用来学习的github">不只用来学习的GitHub</h3>
<h4 id="1-程序员做饭指南">1. <a href="https://github.com/Anduin2017/HowToCook">程序员做饭指南</a></h4>
<h4 id="2-996icu">2. <a href="https://github.com/996icu/996.ICU">996.ICU</a></h4>
<h4 id="3-各种资料知识影视记录片音乐书籍媒体聚集地持续整理中">3. <a href="https://github.com/mswnlz">各种资料、知识、影视、记录片、音乐、书籍、媒体聚集地，持续整理中</a></h4>

<p><strong>GitHub依然固执地生长着最开放的互联网精神。</strong></p>]]></content><author><name></name></author><category term="工具" /><summary type="html"><![CDATA[定期追更的项目： 1. Weekly（科技爱好者周刊） 2. 《HelloGitHub》月刊]]></summary></entry><entry><title type="html">AI 辅助编程中的 LLM 选择最佳实践</title><link href="http://localhost:4000/ai/2025/05/04/AI%E8%BE%85%E5%8A%A9%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84LLM%E9%80%89%E6%8B%A9%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html" rel="alternate" type="text/html" title="AI 辅助编程中的 LLM 选择最佳实践" /><published>2025-05-04T00:00:00+08:00</published><updated>2025-05-04T00:00:00+08:00</updated><id>http://localhost:4000/ai/2025/05/04/AI%E8%BE%85%E5%8A%A9%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84LLM%E9%80%89%E6%8B%A9%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5</id><content type="html" xml:base="http://localhost:4000/ai/2025/05/04/AI%E8%BE%85%E5%8A%A9%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84LLM%E9%80%89%E6%8B%A9%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html"><![CDATA[<h1 id="ai辅助编程中的llm选择最佳实践">AI 辅助编程中的 LLM 选择最佳实践</h1>

<p><strong>看开发阶段、试不同模型、管好成本，最终找到最适合自己的方案</strong></p>

<p>软件开发有不同阶段，每个阶段需要 AI 的不同能力。开发分成四个阶段，并给出如何选择模型的建议：</p>

<h2 id="1-设计与架构阶段">1. 设计与架构阶段</h2>

<ul>
  <li>
    <p>需求：这个阶段你需要一个能深度思考、有丰富知识的模型，帮助理解业务需求并设计架构。</p>
  </li>
  <li>
    <p>推荐模型：OpenAI o1、Gemini 2.5 Pro、DeepSeek R1</p>
  </li>
  <li>
    <p>为什么选这些：这些模型推理能力强，能帮你做出清晰的早期决策</p>
  </li>
  <li>
    <p>成本建议：这里值得用高级模型，因为好的架构能省下后期改动的麻烦</p>
  </li>
</ul>

<h2 id="2-开发阶段">2. 开发阶段</h2>

<ul>
  <li>
    <p>需求：写代码时，需要模型能理解代码模式、建议补全、解释实现</p>
  </li>
  <li>
    <p>推荐模型：Gemini 2.5 Pro、GPT-4o、Grok 3</p>
  </li>
  <li>
    <p>额外亮点：Claude 3.7 Sonnet 虽然基准测试分数不最高，但很多开发者喜欢，建议多试试</p>
  </li>
  <li>
    <p>成本建议：简单编码用中档模型就够，复杂任务再用高级模型</p>
  </li>
</ul>

<h2 id="3-测试阶段">3. 测试阶段</h2>

<ul>
  <li>
    <p>需求：写测试时，模型要能发现边缘情况、写出可靠的测试代码</p>
  </li>
  <li>
    <p>推荐模型：Claude 3.7、OpenAI o1、GPT-4o Mini</p>
  </li>
  <li>
    <p>成本建议：普通测试用中档模型，复杂或关键测试用高级模型</p>
  </li>
</ul>

<h2 id="4-部署与审查阶段">4. 部署与审查阶段</h2>

<ul>
  <li>
    <p>需求：审查大段代码时，模型要有大上下文窗口，能一次看懂整个代码库</p>
  </li>
  <li>
    <p>推荐模型：Gemini 2.5 Pro、GPT-4o Mini、GPT-4.1、OpenAI o1</p>
  </li>
  <li>
    <p>成本建议：高级模型能加快审查速度，节省时间，值得投资</p>
  </li>
</ul>

<p><strong>实用建议：如何选到适合的模型</strong></p>

<p>除了按阶段选模型，还有一些实用技巧：</p>

<ul>
  <li>
    <p>从小模型开始：先试试中档模型（如 Claude 3 Haiku 或 GPT-3.5），不够用再升级</p>
  </li>
  <li>
    <p>任务分模型：在 Cline 中，可以为不同任务设置不同模型。比如头脑风暴用高级模型，日常编码用中档，写文档用便宜的</p>
  </li>
  <li>
    <p>关注花销：用 Cline 的 token 计数器，看看哪些任务花钱多，优化模型选择</p>
  </li>
  <li>
    <p>别只看分数：基准测试（如 MMLU Pro、Big CodeBench）只是参考，实际用起来可能不一样</p>
  </li>
  <li>
    <p>多试试：在不重要的项目上实验不同模型，找到感觉</p>
  </li>
  <li>
    <p>Plan/Act 分开选：Cline 有个 Plan/Act 模式，规划可以用推理强的模型（如 Gemini 2.5 Pro），实现用快又便宜的（如 Gemini 2.5 Flash Preview）</p>
  </li>
</ul>

<p><img src="/assets/images/2e9ea54a25bedd353d5e06c076d9c7e4.jpeg" alt="Image" /></p>]]></content><author><name></name></author><category term="AI" /><summary type="html"><![CDATA[AI 辅助编程中的 LLM 选择最佳实践]]></summary></entry><entry><title type="html">实时反思优化管理能力</title><link href="http://localhost:4000/%E6%80%9D%E8%80%83/2025/05/03/%E5%AE%9E%E6%97%B6%E5%8F%8D%E6%80%9D%E4%BC%98%E5%8C%96%E7%AE%A1%E7%90%86%E8%83%BD%E5%8A%9B.html" rel="alternate" type="text/html" title="实时反思优化管理能力" /><published>2025-05-03T00:00:00+08:00</published><updated>2025-05-03T00:00:00+08:00</updated><id>http://localhost:4000/%E6%80%9D%E8%80%83/2025/05/03/%E5%AE%9E%E6%97%B6%E5%8F%8D%E6%80%9D%E4%BC%98%E5%8C%96%E7%AE%A1%E7%90%86%E8%83%BD%E5%8A%9B</id><content type="html" xml:base="http://localhost:4000/%E6%80%9D%E8%80%83/2025/05/03/%E5%AE%9E%E6%97%B6%E5%8F%8D%E6%80%9D%E4%BC%98%E5%8C%96%E7%AE%A1%E7%90%86%E8%83%BD%E5%8A%9B.html"><![CDATA[<h2 id="实时反思优化管理能力">实时反思，优化管理能力</h2>

<p>回顾工作这么多年，从开始的基本的coding工作开始，一线资深研发到后来的技术决策者，再到后来的创业。这些工作过程中我体会到在技术管理方面有很多道理在人生道路上也一样。总结归纳为用三个词来形容：父母心、为人真诚、反思精进，这些也是我一直再坚守执行的。</p>

<h3 id="1-父母心">1. 父母心</h3>
<p>在最近两年家里有了小朋友，在照顾小朋友的同时会去学习如何照顾、怎么哄睡、怎么做辅食、对于一些游戏怎么交小朋友去做、平时在互动的过程中如何用精简的指令让小朋友明白你的表达是什么(特别是在还不太会说话阶段)，这些都是从书中去学习，过程中越觉得其中的理念跟管理相同。书里面所讲的不是数理化，而是一个人最根本的东西：好奇心、同理心、韧性、乐观、与遇到问题用不放弃。这里面也会谈到一个话题就是作为家长对于子女的期待是什么？是出人头地吗？放到现在这个时代背景下，大部分父母应该都不会是这个答案。我的答案也很简单就是有积极向上的价值观，长大了有自己独立思考的能力，即便没有大人的依靠，依然能够很好的过自己的生活。</p>

<h3 id="2-为人真诚">2. 为人真诚</h3>
<p>为人真诚，众多的管理方法都更像是术，而在这些技术之上是道的层面。这个真诚既是我们对自己真诚，也是我们对身边所有人都保持真诚的态度。说到真诚，我觉得它趋于一种价值观判断，甚至是道德要求，这部分无论在工作还是生活上都是相同的。</p>

<p><strong>对自己真诚：</strong>
作为工作十多年的老兵来说，人的能力是逐步进行提升的，这个里面没有所谓的捷径。想提高、提升自己就得多精力一些事情，特别是经历所谓的“挫折”。踩坑不可怕，可怕的是不能真诚的面对，不能想法设法地赶上来（清晰的认识自己，往往大家总是强调自己会什么？而忽略了自己不会什么）。当我们在相对顺境的情况下呢，就会遇到另外一种考验，我们也不要膨胀，而是要始终带着一颗感恩的心。</p>

<p><strong>对别人的真诚：</strong>
遇事情不能冲动，碰到冲突态度要好但是话重要。对一个人好，有时候可以一针见血，因为对人真诚当然也包括指出对方存在的问题，他可能会不好受，但是相信平静之后大部分人还是可以理解的。痛了，改了，就是更好的自己。</p>

<h3 id="3-反思精进">3. 反思精进</h3>
<p>无论从事什么工作，最开始的部分都是从基础做起，遇到一些跨界的伙伴更是如此。回顾自己工作更是如此，能够逐渐成长、成熟起来，能够独挡一面，不断优化自己的能力，其实离不开反思精进这个方法。这个里面涉及到最基本的一个话题就是认知，让我不断反思的动力，其实是源于我想成为一个什么样子的人（这个很重要，真的很重要）。我一直相信人生是长跑，再难的事情也挡不住多年的专注与死磕，这里很重要的一个点就是一定要实践。这种模式就是：实践、认识、再实践、再认识的过程，循环往复以至无穷，而实践和认识之每一循环的内容，都比较地进到了高一级的程度。很多事情想做好，都不容易的，所以也希望你身处顺境时正视自己，遇到挫折时不被外界干扰。</p>

<h4 id="最后">最后</h4>
<p>关于人生的意义。随着工作和生活阅历的增加以及年龄的增长，看多了一些身边的人情冷暖，生老病死。现在想来，我觉得每一个人在人生的不同阶段会有不一样的诉求。我还是觉得一个人活在世上应该不断努力不断精进，但是目的不是出人头地，而是自我实现和这一路的风景。</p>

<p>如果你现在就要离开这个世界，闭上眼睛回顾这一生你会想起些什么呢？那个时候你会想起的事情和人才是你现在应该珍惜的。</p>

<p><strong>去追求更好的自己，但是不要太计较结果，活在当下。</strong></p>]]></content><author><name></name></author><category term="思考" /><summary type="html"><![CDATA[实时反思，优化管理能力]]></summary></entry><entry><title type="html">你需要知道的事情</title><link href="http://localhost:4000/%E6%80%9D%E8%80%83/2024/08/25/%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B.html" rel="alternate" type="text/html" title="你需要知道的事情" /><published>2024-08-25T00:00:00+08:00</published><updated>2024-08-25T00:00:00+08:00</updated><id>http://localhost:4000/%E6%80%9D%E8%80%83/2024/08/25/%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B</id><content type="html" xml:base="http://localhost:4000/%E6%80%9D%E8%80%83/2024/08/25/%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B.html"><![CDATA[<h3 id="你需要知道的事情">你需要知道的事情</h3>

<p>最近“黑神话悟空”游戏比较火热，看到有一句话就是直面天命，能量满满。想到游戏中角色扮演，想到生活中每个人也是一种角色，我们不也是在“扮演”吗？以下是近期的一些思考。</p>

<h4 id="1-商业">1. 商业</h4>
<p><strong>熟悉所有行业的底层逻辑，冷静的思考每一个行业(特别是作为商业投资者)。</strong>
任何一个商业模式再变，商业底层逻辑万变不离其宗。</p>

<p>日常生活中就有一些类似的场景，当你在一家餐饮店吃完饭后，老板说我们现在有个活动就是充值1000元，当前这顿饭免费(例如这顿饭价值200)，这个看似划算，可能当时一心动就充值了。理解本质的话这个顿饭并不是免费的，800/1000 = 0.8，相当于8折，就是用800充值抵1000。<strong>直接打折容易产生“产品价值被贬低”等副作用，而隐形打折却让人感觉占到了便宜又不容易产生“该产品质量有问题”等等的认知问题。</strong></p>

<p>类似的还有骗子的诈骗电话，你接到一个电话，对方操着很奇怪的口音对你说：“我是你领导，明天到我办公室来一趟。”，你一听就知道他是骗子，你甚至会觉得你不是在被骗而是在被羞辱。或许你会想：骗子现在也太不专业了吧，接受过培训吗？有成功率的考核吗？如果你有这样的想法，那你是在是多虑了。蹩脚的骗术才是高明的骗术，其实质是条件概率在起作用。把骗子人群分为易骗人群和难骗人群，比例各占（20% 和 80%）。易骗人群中60%容易得手，40%失败。难骗人群中10%容易得手，90%失败。骗子的得手率为20%，具体公式为：20%(易骗) * 60%(得手) + 80%（难骗）*10%（得手） = 20%，得手率20%意味着骗子打5个电话能骗到1个人，看起来 “效率有点低”。<strong>但是如果能把”难骗的人群“筛选出去。那么这个条件就是故意很像骗子，当难骗的人听到奇怪的口音明显感觉不是自己的老板时，会很快挂掉电话，这样，骗子就不用在他们身上多费口舌了，而骗子真花时间去聊的人群随之缩小为“易骗人群”，这样得手率就到了60%，即打5个电话可以骗到3个。条件概率不是骗子的独家武器，当它被用到正道时，可以发挥出难以想象的巨大作用。</strong>
多和找真正的从业者交流，聊聊这行的底层商业逻辑。世界都在进步，你不进则退，没有一成不变的。</p>

<h4 id="2-宏观中观微观的结合">2. 宏观、中观、微观的结合</h4>
<p><strong>宏观规律、中观行业的基本面特征、微观交易上的、投资的技巧。</strong> 提早做未来5-10年的预判。大的宏观-&gt;中观的产业-&gt;微观的个体。99%是选择，1%时努力。选择错了，努力不值钱。对于年轻人或者是这个阶段的你，有时间可以与不同行业了解接触，即使当前跟我没有直接关系，也愿意去听，多问问why？<strong>因为这就是信息差。透过某个想象捕捉到背后的行业变化。</strong>
在疫情前有一个外卖小哥负责片区的外卖配送，但是在做这份工作的时候，发现当时有一些餐馆的餐食就是预制菜，出单很快，甚至有一些店面都没有实际的餐厅。这个小哥当时打听到预制菜这一途径，自己也开了餐馆，等这波风口过了就把餐馆直接退掉，这也不为对于信息差的利用。反而到了现在你去餐馆吃饭，有一些餐馆还特别挂出牌子说明不是预制菜。
即便在目前的传统行业中，也在爆发新的变化，比如台球厅、网吧等，整体模式相比5-10年前有巨大变化。<strong>用户在迭代，商业模式也要跟上。目前播客节目也比较好，在微观世界对于个体来说，可能单独的那一期播客或者文章很少能特别影响深刻的改变生活，可这一期、那一期、再加上其他主播或者节目的某一期，会碰撞出新的思路，总会链接到一起。就算现在没用，那也比刷视频强吧。</strong></p>

<h4 id="3-资产端回报到负债端回报">3. 资产端回报到负债端回报</h4>
<p>资产端回报：资产升值，比如房价上涨
负债端回报：资产不涨的前提下，降低成本，比如每年租金。
过去二三十年，资产端回报太高，对于当时房子的这点租金根本看不上，同样那个阶段前存到银行产生的利息同样可能会被忽略，也从来没考虑过负债端回报。因为经济的整体走向，以及人们对经济的预期走势向好，整体因素作用直接购买房子带来的收益相比其它途径来的更快。<strong>不过现在大周期结束了，经济也是有周期性的，上行周期和下行周期相互交替，未来10-15年，大的宏观环境不支持太高的资产回报率了，应该投具有“负债端回报的资产”。</strong> 只有一代人腾出资源和空间，下一代人的风险偏好才会改善，这种大周期基本5-10年甚至更长时间。日本走了25年。如果目前你还在考虑职业规划、投资、创业，第一件事情是“稳”、当期现金流。一定要适应经济周期性的发展规律，如果所做的事情龉经济周期相反，那么最终的结果可能是努力了，但是收益并不是很大。追求资产端回报的时代结束了，是时候追求负债端回报了。</p>

<h4 id="4-永远输钱的股民">4. 永远输钱的股民</h4>
<p>按照时间定律，<strong>要尽可能地做对事情，只要事情做得对，时间一长，想不进步都不可能。但是做对的事情并不容易，人总是在不断的犯错误。接下来的问题时，犯错误可怕吗？一个错误犯一次并不可怕，可怕的是同一个错误不断重复还不自知，当然比这更可怕的是，明知道什么是错误，明知道什么是对的，但依然要坚持错误。</strong> 在股市上，有输有赢是一件很正常的事情，但是有的故名永远只输不硬，这就有大问题了，因为让一直猴子来炒股，它可能输赢各半。</p>

<p><strong>有几点需要避免：</strong>
<strong>不要把赌场当作投资的场合。</strong> 我们都知道长赌必输这句话，赌场玩的是一个零和游戏，考虑到赌场本身的运行成本，也就是庄稼必须抽取的费用，赌场是一个回报率为负值的地方。只要时间玩的长一些，再多的钱都必然会交给赌场。<strong>在股市中因为总有人觉得别人赔钱，自己能够把哪些“菜鸟”的钱挣到手，岂不知，想割“韭菜”的人，总是自己成为“韭菜”。投资和投机是有本质区别的。</strong></p>

<p><strong>不要相信自己能够把我住时机。</strong> 我们从小被教育要把握时机，但是在股市中的时机难以把握。今天，但凡一个具备充足流动性的时长，资产的价格和它的价值就是一致的，因此不存在别人看不到，你看到的机会。<strong>有人看到某只股票下跌了10%，觉的自己能够便宜10%买到同样的东西，殊不知，昨天的这只股票和今天的这只股票不是同一个东西。股价是靠共识维持的，换句话说，当共识不在了，其价值也就不在了。</strong></p>

<p><strong>不要相信自己看到了别人看不到的投资机会。今天，很多人投资喜欢买一些几分钱、几角钱一股的股票，因为他们觉得这些股票的价格已经低到无法再低了，只有向上的空间，没有向下的空间。事实上，一角钱一股的股票，未必比100元一股的更便宜。</strong> 一家股价不断上涨的企业，说明它的盈利越来越越多，这背后体现的是管理好，市场大，产品优。一家长期股价在一角钱徘徊的企业，其内部一定存在一大堆问题。<strong>在世界上任何人、任何组织、包括球队，都没那么重要，放弃他们，世界照样运转，更重要的是，我们可以把资源和专注度放在更有意义的事情上。</strong></p>

<h4 id="5-兴趣专业">5. 兴趣&amp;专业</h4>
<p>爱好最后不能当饭吃，是没有用的，得先养活自己。专业和商业的结合专业、兴趣很深，但不会把它转成赚钱，也活不下去。兴趣和最后的商业模式联合在一起。真正成功的大都是把自己的兴趣做成了事业，最难的是跨过爱好和商业化之间的鸿沟。一个事儿当你做起来毫不费力，但是别人很痛苦的时候，就是你的优势。</p>

<h4 id="6-延展">6. 延展</h4>
<p>主业不可以放弃，但任何关联的都要延展。不要拒绝在任何一点上做延展，可以不测重于此，但不要拒绝新事物。各行各业只要愿意观察，还是有机会的。渗透率从0到1的时候是挖金子(赚钱),从1到10的过程是卖铲子(卖方法)。女装店：真正的逻辑是社交。日积月累的客群，是一个小社群的场景。如果创业那么商业逻辑必须非常清楚（变现），不是单纯的烧钱，最不确定的变量是“人”，合伙人很关键。创业时尽量选择同阶层的，能抗风险的、潜意识的社会资源更加匹配。新的行业、兴趣加上深度-&gt;专业，再多加一个商业思考，形成闭环。</p>

<p>晚安！</p>]]></content><author><name></name></author><category term="思考" /><summary type="html"><![CDATA[你需要知道的事情]]></summary></entry><entry><title type="html">日常思考问题的5种数学思维思维模式</title><link href="http://localhost:4000/%E6%80%9D%E8%80%83/2024/08/18/%E6%95%B0%E5%AD%A6%E6%80%9D%E7%BB%B4%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F.html" rel="alternate" type="text/html" title="日常思考问题的5种数学思维思维模式" /><published>2024-08-18T00:00:00+08:00</published><updated>2024-08-18T00:00:00+08:00</updated><id>http://localhost:4000/%E6%80%9D%E8%80%83/2024/08/18/%E6%95%B0%E5%AD%A6%E6%80%9D%E7%BB%B4%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F</id><content type="html" xml:base="http://localhost:4000/%E6%80%9D%E8%80%83/2024/08/18/%E6%95%B0%E5%AD%A6%E6%80%9D%E7%BB%B4%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F.html"><![CDATA[<h1 id="日常思考问题的5种数学思维思维模式">日常思考问题的5种数学思维思维模式</h1>

<h2 id="1-从不确定性中找到确定性">1. 从不确定性中找到确定性</h2>
<p>第一种数学思维源于概率论，叫作“从不确定性中找到确定性”。</p>

<p>假如一件事情的成功概率是20%，是不是意味着我重复做这件事5次就一定能成功呢?很多人会这样想，但事实并不是这样。如果我们把95%的概率定义为成功，那么，这件20%成功概率的事，你需要重复做14次才能成功。换句话说，你只要把这件20%成功概率的事重复做14次，你就有95%的概率能做成。
计算过程如下，对公式头疼的朋友可以直接略过。做1次失败的概率为:1-20%=80%=0.8
重复做n次都失败的概率是:80%”=1-95%=5%=0.05(重复做n次至少有1次成功的概率是95%，就相当于重复做 n次、每一次都不成功的概率是5%)</p>
<blockquote>
  <p>n = log0.08^0.05≈13.42</p>
</blockquote>

<p>所以，重复做14次，你成功的概率能达到 95%。
如果你要达到99%的成功概率，那么你需要重复做21次。
虽然这个世界上没有100%的成功概率，但是只要重复做大概率成功的事情，你成功的概率就能够接近100%。这就是从不确定性中找到确定性，这是概率论交给我们最重要的思维</p>

<h2 id="2-用动态的眼光看问题">2. 用动态的眼光看问题</h2>
<p>第二种数学思维源于微积分，叫做“用动态的眼光看问题”。</p>

<p>宏观上，我们看到的是位移，但是从微观的角度来看，整个过程是从加速度开始的：加速度累积，变成速度；速度累积，变成位移。这就是积分。反过来说，物体之所以会有位移，是因为<strong>加速度</strong>经过了一段时间的累积。而物体之所以会有速度，是因为加速度经过了一段时间的累积。而物体之所以会有位移，是因为加速度经过一段时间的累积。位移相对于时间的一阶导数是速度，速度相对时间的一阶导数是位移，微观上其实是每一个瞬间速度的累积。而位移的倒数，就是从宏观回到微观，去观察它瞬间的速度。这就是微分。</p>

<p>那么微积分对于我们日常生活到底有什么作用呢？
理解微积分，你看问题的眼光就会从静态变为动态。</p>

<p>加速度累积，变成速度；速度累积，变成位移，其实人也一样。你今天晚上努力学习了，但是一晚上的努力并不会直接变成你的能力。你的努力得积累一段时间，才会变成你的能力。而你有了能力，并不会马上作出成绩。你的能力得积累到一段时间，才会变成你的成绩。而你有了一次成绩，并不会马上得到领导的赏识。你的成绩也得积累一段时间，才会使你得到领导的赏识。
从努力到能力、到成绩、到赏识，是有一个过程的，有一个积分的效应。
努力的时候，希望瞬间得到大家的认可，但是出了问题后却不去想几个月前的懈怠。这是很多人容易走进的思维误区。</p>

<p>从本质上讲，微积分的思维方式就是用动态的眼光看问题。一件事情的结果并不是瞬间产生的，而是长期以来的积累效应造成的。出了问题，不要只看当时那个瞬间，只有从宏观一直追述到微观，才能找到问题的根源。</p>

<h2 id="3-公里体系">3. 公里体系</h2>
<p>第三种数学思维源于几何学，叫做公里体系。如果说公里体系是一个大树，那么，公里体系就是大树的树根。在几何学中，一旦制定了不同的公里，就会得到完全不同的知识体系。这就是公里体系的思维。</p>

<p>这种思维在我们的生活中非常重要，比如，每家公司都有自己的愿景、使命、价值观，或者说公司基因、文化。因为愿景，使命，价值观不同，公司与公司之间的行为和决策差异就会很大。一家公司的愿景、使命、价值观，就相当于这家公司的公里。公里直接决定了这家公司的各种行为往那个方向发展。所有的规章制度，工作流程，决策行为，都是在愿景，使命，价值观这些公里上“生长”出来的定理，他们构成这家公司的公里体系。而这个体系一定是完全自洽的。不管公司以后如何发展，只要有公里存在，就会演绎一出一套能够解决问题的新法则（定理）。</p>

<p>公理没有对错，不需要被证明，公理是一种选择，是一种共识，是一种基准原则。</p>

<p>制定不同的公理，就会得到完全不同的公理体系，并因此得到完全不同的结果。</p>

<h2 id="4-数字的方向性">4. 数字的方向性</h2>
<p>第四种数学思维源于代数，叫作“数字的方向性”。</p>

<p>数这个东西，除了大小，还有一个非常重要的属性：方向。在数学上，我们把有方向的数字叫作向量。</p>

<p>数其实是有方向的，在日常的工作和生活中可以得以体现。在公司做事情，两个人都是很有能力，合作的时候，如果他们的能力都往一个方向使，形成合力，这是最好的结果。但如果他们的能力不往一个方向使，反而相互牵制，那可能还不如把这件事情交给其中一个人来做。</p>

<h2 id="5-全局最优和达成共赢">5. 全局最优和达成共赢</h2>
<p>第五种数学思维源于博弈论，叫作“全局最优和达成共赢”。我们每天大大小小的决策，每个决策的背后逻辑就是一场博弈。</p>

<p>下围棋就是典型的博弈场景。没走一步棋，我的所得就是你的所失，我的所失就是你的所得。这是博弈论中典型的零和博弈。在零和博弈中，你一定要保持清醒：你要的是全局最优解，而不是局部的最优解。</p>

<p>经营公司也一样，不要总是想着每件事情都必须一凡风顺，如果你想得到最好的结果，在一些关键步骤上就要做出妥协。</p>

<p>除了零和博弈之外，还有一种是非零和博弈，它讲究共赢，共赢的前提是建立信任，但是建立信任特别不容易。</p>

<p>孔子说“三十而立，四十而不惑，五十而知天命，六十而耳顺，七十而从心所欲不逾矩”。<strong>所谓“从心所欲不逾矩”，不是说你要通过约束自己来让自己做的事情不越出边界，而是当你拥有符合规律的思维方式时，你做的事情根本就不会越出边界。</strong></p>

<p><img src="/assets/images/0519229cd9a2269e743231065f8d2254.jpg" alt="Image" /></p>]]></content><author><name></name></author><category term="思考" /><summary type="html"><![CDATA[日常思考问题的5种数学思维思维模式]]></summary></entry><entry><title type="html">周末思考记录20240811</title><link href="http://localhost:4000/%E6%80%9D%E8%80%83/2024/08/11/%E5%91%A8%E6%9C%AB%E6%80%9D%E8%80%83%E8%AE%B0%E5%BD%95.html" rel="alternate" type="text/html" title="周末思考记录20240811" /><published>2024-08-11T00:00:00+08:00</published><updated>2024-08-11T00:00:00+08:00</updated><id>http://localhost:4000/%E6%80%9D%E8%80%83/2024/08/11/%E5%91%A8%E6%9C%AB%E6%80%9D%E8%80%83%E8%AE%B0%E5%BD%95</id><content type="html" xml:base="http://localhost:4000/%E6%80%9D%E8%80%83/2024/08/11/%E5%91%A8%E6%9C%AB%E6%80%9D%E8%80%83%E8%AE%B0%E5%BD%95.html"><![CDATA[<h3 id="周末思考记录20240811">周末思考记录20240811</h3>
<h4 id="1-找到知识的盲点">1. 找到知识的盲点</h4>
<p>在小时候记得映像比较深刻的就是，就是在课堂上背诵九九乘法表，背不过放学后还不让回家（天快黑了，还是会放的）。包括现在一些简单的乘法算术在计算的时候也会采用乘法表进行，当时以为乘法只有一种计算方式，其实后来才了解到乘法在不同的国家则计算方式不一样，在俄罗斯采用的是“俄罗斯农夫乘法”，在古埃及通过垒石头的方式进行计算，叫做“古埃及乘法”，类似的还有“印度乘法”。同样的还有10进制、12进制、60进制、生肖等，这些是如何进行计数的，到目前知道的是，这些进制就跟人类的双手和脚趾有关，10个手指头，直接计数比较简单这就是10进制，12进制就是把一个人的的单手除大拇指之外的，其它每一根手指分为3节，所以一只手除开大拇指就是12节，类似的还有60进制，无非是用上双手等。其实想想这些定义和发明都是源于事物本身，如果当时学习的时候能知道这些，那么学习的时候是否兴趣会更大一些。</p>

<h4 id="2-把手弄脏的理解">2. 把手弄脏的理解</h4>
<p>回顾过往的工作经历中，在职场中有意或者无意的会去把一件事情整的明明白白、或者是对于业务来说那块是难点就会花时间去啃、在团队中会时不时出现救火场面。其实这些成长也罢、或者让自己的工作经历更加丰富，这无非是通过一种把手弄脏的途径（路径），到逼自己成长的一种方式。记得一次我回老家，去一家在县城从上学期间就在吃的蒸面店，据说蒸面老板在当地相当有钱（相对），那次去吃的时候，在蒸面端上桌子的时候，应该是鞋子比较滑的原因，有一半蒸面直接倒在的地上，老板下意识的去拿扫帚和纸巾把地上收拾干净，其实当时我看了店里还有其他服务员（当时并没有在做事情）。其实老板的行为是自主意识的，地上脏了就回去擦。现在想想，我们身处现实生活中，那个人的手是干净的呢？与其说把手弄脏，反倒是可以说何必在意是否会把手弄脏，在这个过程中重要的是如何面对或这面对这件事情的反应。</p>

<h4 id="3-听到的不一定可靠">3. 听到的不一定可靠</h4>
<p>这个事情也许在现实生活中，太司空见惯了。这里说一个不争的事实，尤其在近1-2年，大家都在讨论经济不好，大环境不好之类的话，或者是针对这些还做了一些讨论。有意思的是我看了一个数据（真正的大众群体：月薪3000~5000，分布在三四线城市，平均受教育年限10.9年左右（即中专到大专水平）。中国有护照的人不到1亿、没做过飞机的大概10亿、缴纳个人所得税大概几千万。1970年~1985年出生的人占总人口23%左右，占总消费量58%。90后、00后占比不足10%。）。不难看出，目前的这些声音很多是通过媒体平台或者是能在网上留下足迹之后被人看到进行传播的，那么还有很多人从不接触互联网，或者是在网络上的足迹相对比较少，那么这部分的声音是无法被外界知道的，。在当前的经济环境下，养老、医疗等服务性行业任然是很具前景的，大环境不好是事实，但是并不是所有的行业，只是我们常常只关注我们看到的罢了。</p>

<h4 id="4-日常反思">4. 日常反思</h4>
<p>无论在生活上和工作上，都需要对自己当下的状态进行一些反思、总结。在工作中我会专门花时间回顾一周或一个月的工作，其实工作的过程和日常处理的事情并没有那么高大上，但是如果这些反思通过笔记记录下来，会很有意思，工作中的周报这些我同样会花时间思考记录，可能有人会问这有啥用？其实你想想，整个过程不就是一个成长的过程吗，这些记录下的思考和总结是不同阶段对新事物的反馈，或者是旧事物的思考，这也代表了当下最真实的自己，如果回过头再看这些，这就是一部成长记录，也许在未来的某个时间可以发挥巨大作用。也就像此时此刻，我在记录一些东西，记录一些的思考见闻。这些记录当然可以选择一个不易丢失的设备进行存储，这也是一路走过来我发现现在互联网上搜索到的东西没有以前多的原因。</p>

<h4 id="5-家人陪伴">5. 家人陪伴</h4>
<p>在职业生涯中，家庭给予我的帮助挺大的，一些重大选择都选择基于支持，我非常欣慰能有这样的家庭。即使目前即使在工作中会疲惫不堪，但是回到家中看到家人和小孩之后，这些都消失了，感觉自己立刻切换了场景，这也许就是被治愈的一种方式。当我们放下键盘，关掉电源的这一刻，我们的生活才刚刚开始，抽出时间尽量陪伴家人，做一些高价值的陪伴。</p>

<p><strong>PS：最近身边的一些伙伴感冒发烧，咳嗽不断，去检测是新冠病毒，方便化大家备一些常用的药（对乙酰氨基酚片，可以备一点）</strong></p>]]></content><author><name></name></author><category term="思考" /><summary type="html"><![CDATA[周末思考记录20240811 1. 找到知识的盲点 在小时候记得映像比较深刻的就是，就是在课堂上背诵九九乘法表，背不过放学后还不让回家（天快黑了，还是会放的）。包括现在一些简单的乘法算术在计算的时候也会采用乘法表进行，当时以为乘法只有一种计算方式，其实后来才了解到乘法在不同的国家则计算方式不一样，在俄罗斯采用的是“俄罗斯农夫乘法”，在古埃及通过垒石头的方式进行计算，叫做“古埃及乘法”，类似的还有“印度乘法”。同样的还有10进制、12进制、60进制、生肖等，这些是如何进行计数的，到目前知道的是，这些进制就跟人类的双手和脚趾有关，10个手指头，直接计数比较简单这就是10进制，12进制就是把一个人的的单手除大拇指之外的，其它每一根手指分为3节，所以一只手除开大拇指就是12节，类似的还有60进制，无非是用上双手等。其实想想这些定义和发明都是源于事物本身，如果当时学习的时候能知道这些，那么学习的时候是否兴趣会更大一些。]]></summary></entry><entry><title type="html">最佳实践的理解</title><link href="http://localhost:4000/%E6%88%90%E9%95%BF/2024/05/19/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E7%9A%84%E7%90%86%E8%A7%A3.html" rel="alternate" type="text/html" title="最佳实践的理解" /><published>2024-05-19T00:00:00+08:00</published><updated>2024-05-19T00:00:00+08:00</updated><id>http://localhost:4000/%E6%88%90%E9%95%BF/2024/05/19/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E7%9A%84%E7%90%86%E8%A7%A3</id><content type="html" xml:base="http://localhost:4000/%E6%88%90%E9%95%BF/2024/05/19/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E7%9A%84%E7%90%86%E8%A7%A3.html"><![CDATA[<h3 id="最佳实践的理解">最佳实践的理解</h3>

<p>最近因为家里的事情，有一段时间没有更新了。刚在整理近期的工作和生活中的事情，想到一个词是“最佳实践“这个词。这个词也不陌生，经常在软件研发领域会说这个方案是最佳实践或者不是、在其他行业有时后会说应该这么做才是最好的、在生活中回顾做的一些决策和操作之后，在现在看来可能部分决策不是最佳实践。</p>

<h4 id="1-概率">1. 概率</h4>
<p>在生活和工作中处处面临选择，每种选择其实可能都会伴随着不同的结果，其实这就产生了概率问题。只是现实社会中往往大家可能会总结经验，让好的结果尽可能发生，那么从概率的角度讲就是正向概率增大，那么这就是最佳实践的叠加效应。回想最早的机器学习(监督和无监督)、当前生成式AI(GAI)、金融行业的量化交易等，这些其实最终追求的就是概率问题，在量化交易行业中这个就是胜率问题。<strong>那么最佳实践本质上来说就是做选择，既然做选择就会存在概率问题，在实际生活中会发现最佳实践多了，那么就会形成叠加效应，胜率会增大，就会直接或间接带来一定的收益。</strong></p>

<h4 id="2-学习">2. 学习</h4>
<p>既然面临选择，那么当时不是盲目选择，这里也需要基于一定的事实客观规律，那就是学习。选择要建立在一定的理论基础和方法论，这里有很多关于这方面的文章。我想说的就是费曼的学习法，知识的积累是需要通过学习的方式。其实费曼的学习法是后人通过费曼的诸多文献总结出来的，学习法的精髓有2点：</p>
<h5 id="1-把学到的知识内容用自己的理解进行输出记录笔记输出形式没有限制重要的就是需要用自己理解的方式这很重要">1. <strong>把学到的知识内容用自己的理解进行输出、记录笔记，输出形式没有限制，重要的就是需要用自己理解的方式，这很重要</strong></h5>
<h5 id="2-把通过获取知识理解后的内容作为输入给到自己倒逼自己输出其实这个环节就是说的实践">2. <strong>把通过获取知识理解后的内容作为输入给到自己，倒逼自己输出，其实这个环节就是说的实践</strong></h5>
<p>把上述方法应用到实际的场景中，至少在做选择时会多一个参考，一定不要盲目选择，通过知识的积累，让自己有做更多选择的可能性，从而增加最佳实践的概率。</p>

<h4 id="3-因小失大得不偿失">3. 因小失大，得不偿失</h4>
<p>在重要的事情上多花心思，不是重要的事情上选择果断。可能很多人说什么事情时重要的事情？就是一件事情这么做都无畏那么就可以视为不重要，但凡还要经过大脑思考几回那说明存在一定的重要性。</p>

<p>回想自己生活中就做过比较草率的决定，当时买房子的时候，没有话很多心思、没有参考过一些数据、甚至房子都没仔细看过就决定把房子买了，在当时想着自己能挣到钱无所谓。但是随着房价的下行，发现房子跌了不少，其实这个直接带来的就是经济上的损失，由于当初自己的没有经过认真思考导致的。反而有时间在tb和jd上买东西会纠结这个平台比那个平台便宜，因为这个会在上面停留过多的时间，这个就是不值当的。<strong>相比事情来说这就是典型的时捡了芝麻丢了西瓜，这就不是最佳实践。</strong></p>

<p>在工作中同样存在类似的问题，在做重大的技术方案时，虽然不要求面面具到，但是一定要抓住关键核心、识别出方案中的盲点、救命稻草、基础框架逻辑稳定自洽。这个就可以算在当时那一刻的最佳实践，<strong>最担心的就是考虑较少，一顿操作猛如虎，回头一地鸡毛。</strong> 在核心业务、核心领域上要多花心思，反倒是一些相对不是那么重要的业务功能迭代上方案上考虑够用就好，不要锦上添花。</p>

<h4 id="4-主动与被动">4. 主动与被动</h4>
<p>生活和工作中我们需要主动去面对和take一些事情。很多人认为这是心态问题，其实这是能力问题。<strong>主动与不主动，生命资源相差30倍。在工作中，主动思考和行动的能力尤其重要，主动承担能力和责任之外的事情，本身就是一个非常好的锻炼和成长机会，不要总担心自己的能力不够，害怕没把事情做好，其实不管你最终有没有把这件事情做成，但在做的过程中就是一次非常好的锻炼机会，用了公司的资源，成长了自己的能力，这是一个很划算的事情。</strong> 主动者每天都在日拱一卒，被动者每天都在左右徘徊。这个象限在现实情况下普遍存在，主动一些会让一些不可能成为可能，经历过这样几次之后，你可能在能力上会有很大的提升，在后面做决策和选择时，胜率就会加大，这也是最佳实践。</p>

<h4 id="5-把手弄脏">5. 把手弄脏</h4>
<p>在目前阶段获取资讯或者知识的方式很多，知识在传递的过程中也会发生一些变化(理解偏差)，加上知识的输出者也不不可能把所有细节和方法论都讲出来，这也不太现实。我们在理解这些知识后切记隔岸观火，把这些知识和输出直接用在实际的场景中。<strong>我们一定要结合实际情况，深入理解事情的逻辑和本质，适当的结合和改造、优化，切记空有一套方法论。在软件研发领域，可能你已经是研发小组长、研发Leader，但是对于一线的一些问题必须去了解，知根知底。一定要 do something ，而不是 own stomething。</strong></p>]]></content><author><name></name></author><category term="成长" /><summary type="html"><![CDATA[最佳实践的理解]]></summary></entry></feed>