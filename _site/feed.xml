<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-08-02T10:55:26+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">TayloyChen Blog</title><subtitle>这里是 TayloyChen 的个人博客，与你一起发现更大的世界 | 要做一个有 ikigai 的程序员</subtitle><entry><title type="html">Ai辅助编程中的llm选择最佳实践</title><link href="http://localhost:4000/2025/05/04/AI%E8%BE%85%E5%8A%A9%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84LLM%E9%80%89%E6%8B%A9%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html" rel="alternate" type="text/html" title="Ai辅助编程中的llm选择最佳实践" /><published>2025-05-04T00:00:00+08:00</published><updated>2025-05-04T00:00:00+08:00</updated><id>http://localhost:4000/2025/05/04/AI%E8%BE%85%E5%8A%A9%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84LLM%E9%80%89%E6%8B%A9%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5</id><content type="html" xml:base="http://localhost:4000/2025/05/04/AI%E8%BE%85%E5%8A%A9%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84LLM%E9%80%89%E6%8B%A9%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html"><![CDATA[<h1 id="ai辅助编程中的llm选择最佳实践">AI 辅助编程中的 LLM 选择最佳实践</h1>

<p><strong>看开发阶段、试不同模型、管好成本，最终找到最适合自己的方案</strong></p>

<p>软件开发有不同阶段，每个阶段需要 AI 的不同能力。开发分成四个阶段，并给出如何选择模型的建议：</p>

<h2 id="1-设计与架构阶段">1. 设计与架构阶段</h2>

<ul>
  <li>
    <p>需求：这个阶段你需要一个能深度思考、有丰富知识的模型，帮助理解业务需求并设计架构。</p>
  </li>
  <li>
    <p>推荐模型：OpenAI o1、Gemini 2.5 Pro、DeepSeek R1</p>
  </li>
  <li>
    <p>为什么选这些：这些模型推理能力强，能帮你做出清晰的早期决策</p>
  </li>
  <li>
    <p>成本建议：这里值得用高级模型，因为好的架构能省下后期改动的麻烦</p>
  </li>
</ul>

<h2 id="2-开发阶段">2. 开发阶段</h2>

<ul>
  <li>
    <p>需求：写代码时，需要模型能理解代码模式、建议补全、解释实现</p>
  </li>
  <li>
    <p>推荐模型：Gemini 2.5 Pro、GPT-4o、Grok 3</p>
  </li>
  <li>
    <p>额外亮点：Claude 3.7 Sonnet 虽然基准测试分数不最高，但很多开发者喜欢，建议多试试</p>
  </li>
  <li>
    <p>成本建议：简单编码用中档模型就够，复杂任务再用高级模型</p>
  </li>
</ul>

<h2 id="3-测试阶段">3. 测试阶段</h2>

<ul>
  <li>
    <p>需求：写测试时，模型要能发现边缘情况、写出可靠的测试代码</p>
  </li>
  <li>
    <p>推荐模型：Claude 3.7、OpenAI o1、GPT-4o Mini</p>
  </li>
  <li>
    <p>成本建议：普通测试用中档模型，复杂或关键测试用高级模型</p>
  </li>
</ul>

<h2 id="4-部署与审查阶段">4. 部署与审查阶段</h2>

<ul>
  <li>
    <p>需求：审查大段代码时，模型要有大上下文窗口，能一次看懂整个代码库</p>
  </li>
  <li>
    <p>推荐模型：Gemini 2.5 Pro、GPT-4o Mini、GPT-4.1、OpenAI o1</p>
  </li>
  <li>
    <p>成本建议：高级模型能加快审查速度，节省时间，值得投资</p>
  </li>
</ul>

<p><strong>实用建议：如何选到适合的模型</strong></p>

<p>除了按阶段选模型，还有一些实用技巧：</p>

<ul>
  <li>
    <p>从小模型开始：先试试中档模型（如 Claude 3 Haiku 或 GPT-3.5），不够用再升级</p>
  </li>
  <li>
    <p>任务分模型：在 Cline 中，可以为不同任务设置不同模型。比如头脑风暴用高级模型，日常编码用中档，写文档用便宜的</p>
  </li>
  <li>
    <p>关注花销：用 Cline 的 token 计数器，看看哪些任务花钱多，优化模型选择</p>
  </li>
  <li>
    <p>别只看分数：基准测试（如 MMLU Pro、Big CodeBench）只是参考，实际用起来可能不一样</p>
  </li>
  <li>
    <p>多试试：在不重要的项目上实验不同模型，找到感觉</p>
  </li>
  <li>
    <p>Plan/Act 分开选：Cline 有个 Plan/Act 模式，规划可以用推理强的模型（如 Gemini 2.5 Pro），实现用快又便宜的（如 Gemini 2.5 Flash Preview）</p>
  </li>
</ul>

<p><img src="/images/2e9ea54a25bedd353d5e06c076d9c7e4.jpeg" alt="Image" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[AI 辅助编程中的 LLM 选择最佳实践]]></summary></entry><entry><title type="html">数学思维思维模式</title><link href="http://localhost:4000/2024/08/18/%E6%95%B0%E5%AD%A6%E6%80%9D%E7%BB%B4%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F.html" rel="alternate" type="text/html" title="数学思维思维模式" /><published>2024-08-18T00:00:00+08:00</published><updated>2024-08-18T00:00:00+08:00</updated><id>http://localhost:4000/2024/08/18/%E6%95%B0%E5%AD%A6%E6%80%9D%E7%BB%B4%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F</id><content type="html" xml:base="http://localhost:4000/2024/08/18/%E6%95%B0%E5%AD%A6%E6%80%9D%E7%BB%B4%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F.html"><![CDATA[<h1 id="日常思考问题的5种数学思维思维模式">日常思考问题的5种数学思维思维模式</h1>

<h2 id="1-从不确定性中找到确定性">1. 从不确定性中找到确定性</h2>
<p>第一种数学思维源于概率论，叫作“从不确定性中找到确定性”。</p>

<p>假如一件事情的成功概率是20%，是不是意味着我重复做这件事5次就一定能成功呢?很多人会这样想，但事实并不是这样。如果我们把95%的概率定义为成功，那么，这件20%成功概率的事，你需要重复做14次才能成功。换句话说，你只要把这件20%成功概率的事重复做14次，你就有95%的概率能做成。
计算过程如下，对公式头疼的朋友可以直接略过。做1次失败的概率为:1-20%=80%=0.8
重复做n次都失败的概率是:80%”=1-95%=5%=0.05(重复做n次至少有1次成功的概率是95%，就相当于重复做 n次、每一次都不成功的概率是5%)</p>
<blockquote>
  <p>n = log0.08^0.05≈13.42</p>
</blockquote>

<p>所以，重复做14次，你成功的概率能达到 95%。
如果你要达到99%的成功概率，那么你需要重复做21次。
虽然这个世界上没有100%的成功概率，但是只要重复做大概率成功的事情，你成功的概率就能够接近100%。这就是从不确定性中找到确定性，这是概率论交给我们最重要的思维</p>

<h2 id="2-用动态的眼光看问题">2. 用动态的眼光看问题</h2>
<p>第二种数学思维源于微积分，叫做“用动态的眼光看问题”。</p>

<p>宏观上，我们看到的是位移，但是从微观的角度来看，整个过程是从加速度开始的：加速度累积，变成速度；速度累积，变成位移。这就是积分。反过来说，物体之所以会有位移，是因为<strong>加速度</strong>经过了一段时间的累积。而物体之所以会有速度，是因为加速度经过了一段时间的累积。而物体之所以会有位移，是因为加速度经过一段时间的累积。位移相对于时间的一阶导数是速度，速度相对时间的一阶导数是位移，微观上其实是每一个瞬间速度的累积。而位移的倒数，就是从宏观回到微观，去观察它瞬间的速度。这就是微分。</p>

<p>那么微积分对于我们日常生活到底有什么作用呢？
理解微积分，你看问题的眼光就会从静态变为动态。</p>

<p>加速度累积，变成速度；速度累积，变成位移，其实人也一样。你今天晚上努力学习了，但是一晚上的努力并不会直接变成你的能力。你的努力得积累一段时间，才会变成你的能力。而你有了能力，并不会马上作出成绩。你的能力得积累到一段时间，才会变成你的成绩。而你有了一次成绩，并不会马上得到领导的赏识。你的成绩也得积累一段时间，才会使你得到领导的赏识。
从努力到能力、到成绩、到赏识，是有一个过程的，有一个积分的效应。
努力的时候，希望瞬间得到大家的认可，但是出了问题后却不去想几个月前的懈怠。这是很多人容易走进的思维误区。</p>

<p>从本质上讲，微积分的思维方式就是用动态的眼光看问题。一件事情的结果并不是瞬间产生的，而是长期以来的积累效应造成的。出了问题，不要只看当时那个瞬间，只有从宏观一直追述到微观，才能找到问题的根源。</p>

<h2 id="3-公里体系">3. 公里体系</h2>
<p>第三种数学思维源于几何学，叫做公里体系。如果说公里体系是一个大树，那么，公里体系就是大树的树根。在几何学中，一旦制定了不同的公里，就会得到完全不同的知识体系。这就是公里体系的思维。</p>

<p>这种思维在我们的生活中非常重要，比如，每家公司都有自己的愿景、使命、价值观，或者说公司基因、文化。因为愿景，使命，价值观不同，公司与公司之间的行为和决策差异就会很大。一家公司的愿景、使命、价值观，就相当于这家公司的公里。公里直接决定了这家公司的各种行为往那个方向发展。所有的规章制度，工作流程，决策行为，都是在愿景，使命，价值观这些公里上“生长”出来的定理，他们构成这家公司的公里体系。而这个体系一定是完全自洽的。不管公司以后如何发展，只要有公里存在，就会演绎一出一套能够解决问题的新法则（定理）。</p>

<p>公理没有对错，不需要被证明，公理是一种选择，是一种共识，是一种基准原则。</p>

<p>制定不同的公理，就会得到完全不同的公理体系，并因此得到完全不同的结果。</p>

<h2 id="4-数字的方向性">4. 数字的方向性</h2>
<p>第四种数学思维源于代数，叫作“数字的方向性”。</p>

<p>数这个东西，除了大小，还有一个非常重要的属性：方向。在数学上，我们把有方向的数字叫作向量。</p>

<p>数其实是有方向的，在日常的工作和生活中可以得以体现。在公司做事情，两个人都是很有能力，合作的时候，如果他们的能力都往一个方向使，形成合力，这是最好的结果。但如果他们的能力不往一个方向使，反而相互牵制，那可能还不如把这件事情交给其中一个人来做。</p>

<h2 id="5-全局最优和达成共赢">5. 全局最优和达成共赢</h2>
<p>第五种数学思维源于博弈论，叫作“全局最优和达成共赢”。我们每天大大小小的决策，每个决策的背后逻辑就是一场博弈。</p>

<p>下围棋就是典型的博弈场景。没走一步棋，我的所得就是你的所失，我的所失就是你的所得。这是博弈论中典型的零和博弈。在零和博弈中，你一定要保持清醒：你要的是全局最优解，而不是局部的最优解。</p>

<p>经营公司也一样，不要总是想着每件事情都必须一凡风顺，如果你想得到最好的结果，在一些关键步骤上就要做出妥协。</p>

<p>除了零和博弈之外，还有一种是非零和博弈，它讲究共赢，共赢的前提是建立信任，但是建立信任特别不容易。</p>

<p>孔子说“三十而立，四十而不惑，五十而知天命，六十而耳顺，七十而从心所欲不逾矩”。<strong>所谓“从心所欲不逾矩”，不是说你要通过约束自己来让自己做的事情不越出边界，而是当你拥有符合规律的思维方式时，你做的事情根本就不会越出边界。</strong></p>

<p><img src="/images/0519229cd9a2269e743231065f8d2254.jpg" alt="Image" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[日常思考问题的5种数学思维思维模式]]></summary></entry><entry><title type="html">二八法则的一些思考</title><link href="http://localhost:4000/2024/03/25/%E4%BA%8C%E5%85%AB%E6%B3%95%E5%88%99%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83.html" rel="alternate" type="text/html" title="二八法则的一些思考" /><published>2024-03-25T00:00:00+08:00</published><updated>2024-03-25T00:00:00+08:00</updated><id>http://localhost:4000/2024/03/25/%E4%BA%8C%E5%85%AB%E6%B3%95%E5%88%99%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83</id><content type="html" xml:base="http://localhost:4000/2024/03/25/%E4%BA%8C%E5%85%AB%E6%B3%95%E5%88%99%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83.html"><![CDATA[<p>关于二八法则的另外一种叫法是80/20法则，或者叫关键少数法则。在生活工作方各方面都有体现：</p>

<p>在经济学领域，全球最富有的20%的人口，控制着世界收入的82.7%。</p>

<p>在软件领域，可以应用于优化软件工作，通过修复报告最多的错误的前20%，给定系统中80%的相关错误将被消除。</p>

<p>在运动锻炼上，20%的练习和习惯影响着80%的结果，受训者不应该专注于多种训练。</p>

<p>将二八法则落实到行动上，简单整理了如下方法</p>

<p><strong>做有复利积累的事情</strong></p>

<p>复利特别在经济学领域比较常用，例如做量化一般也会评估复利的长期收益(常说的利滚利)。最常见的复利即资产，即可以自行为持有人带来收益的东西，资产本身是固化的劳动，而靠其赚到的钱又可以固化为资产，从而以指数增长的方式增殖。当然，任何可以积累的东西都是具有复利效应：知识是可以积累下来的，积累的知识帮助做出更高概率正确的决策，带来更大的视野，从而有需求及动力学习更多知识；个人IP影响力是可以积累的，更高的影响力带来更大的曝光，接触更多优秀的人，有更多合作机会，反过来又增强个人的影响力。</p>

<p><strong>极致聚焦，做减法</strong></p>

<p>现实中每个人的精力有限，不太可能可以做所有的事情，要通过分析和评估来确定哪些是产生最大价值的关键因素。旦识别出关键因素，就需要对它们进行优先排序。这意味着要将资源和精力集中在那些最能产生效益的领域。识别并剔除那些消耗时间、金钱和资源但收益甚微的活动。在决策过程中，尽量减少不必要的选项和复杂性。通过简化流程，可以提高效率并减少错误。有效地利用资源，提高效率和产出。</p>

<p><strong>战略优于战术</strong></p>

<p>程序员应该都有感受，写代码最重要的是前面的思考的环节，写只占据很少时间，若思考不清晰，后续会有无尽的debug负担；做产品也一样，我个人看来，商业模式&gt;流量策略&gt;具体开发，商业模式定义了是否解决的是痛点问题，该问题是否给用户带来价值从而用户有付费意愿，该问题定义清楚后，流量策略和具体开发则是水到渠成的事情，而渠道的重要性往往要高于具体开发。</p>

<p><strong>发挥自己的比较优势</strong></p>

<p>社会分工之所以存在，是因为每个人有其比较优势，各自做擅长的事情并合作，会提升整体效率。对个人来说，发挥自己的比较优势，只做那 20% 自己擅长的或有热情的事情（热情本身也会变为擅长），其他事情则是最大程度自动化或者外包出去。当前AI能力如此强大，各细分领域服务极度充沛，特定问题付费解决可节省大量人力，成本远低于自己浪费时间。</p>]]></content><author><name></name></author><summary type="html"><![CDATA[关于二八法则的另外一种叫法是80/20法则，或者叫关键少数法则。在生活工作方各方面都有体现：]]></summary></entry><entry><title type="html">实用mac软件推荐列表</title><link href="http://localhost:4000/2023/12/19/%E5%AE%9E%E7%94%A8Mac%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8.html" rel="alternate" type="text/html" title="实用mac软件推荐列表" /><published>2023-12-19T00:00:00+08:00</published><updated>2023-12-19T00:00:00+08:00</updated><id>http://localhost:4000/2023/12/19/%E5%AE%9E%E7%94%A8Mac%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8</id><content type="html" xml:base="http://localhost:4000/2023/12/19/%E5%AE%9E%E7%94%A8Mac%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%88%97%E8%A1%A8.html"><![CDATA[<p><strong>Apps</strong></p>

<p><strong>日常使用</strong></p>

<p>ClashX Pro：科学上网</p>

<p>只有先科学上网，才能装后面的</p>

<p>Notion：笔记输入 + 博客输出的工具</p>

<p>Chrome：浏览器</p>

<p>Xnip：截图工具</p>

<p>1password 7：密码管理工具</p>

<p>其它的也用过，还是这个原生 App 比较流畅</p>

<p>CleanMyMac X：Mac优化清理工具</p>

<p>Warp WindTerm iTerm2：终端</p>

<p>Alfred：本地搜索、应用启动、剪贴板 📋</p>

<p><strong>效率神器</strong></p>

<p>Karabiner-Elements：键盘键位修改神器</p>

<p>一些配置 <a href="https://gist.github.com/ycjcl868/3933cb65acedb5d771855dee927781d8">karabiner.json</a> ，主要是改 HHKB 和 Apple Keyboard</p>

<p><a href="https://dida365.com/">滴答清单</a> ：任务和规划时间（GTD）的应用</p>

<p><a href="https://flomoapp.com/">flomo</a> ：快速记录一些想法</p>

<p><a href="https://github.com/ripperhe/Bob/releases">Bob 社区版</a> ：划词翻译和截图翻译工具</p>

<p>支持多个翻译聚合还挺方便的</p>

<p><a href="https://inputsource.pro/">Input Source Pro</a> ：不同应用、不同网站自动切换输入法</p>

<p><a href="https://y.qq.com/">QQ Music</a> ：网络音乐服务产品</p>

<p><a href="https://srf.baidu.com/input/mac.html">百度五笔输入法</a></p>

<p>试过 Mac 上各类的五笔输入，还是这个好用</p>

<p><a href="https://netnewswire.com/">NetNewsWire</a> ：开源、免费、全平台的 RSS 订阅、阅读</p>

<p>订阅 <a href="https://github.com/ycjcl868/feeds/blob/master/index.opml">index.opml</a></p>

<p><a href="https://www.macbartender.com/Bartender4/">Bartender 4</a> ：菜单栏应用图标管理工具</p>

<p>管理挺方便，就是 Mac 屏中间刘海那块没适配好</p>

<p>OpenInTerminal：从 Finder 一键打开 Terminal</p>

<p>之前的 Go2Shell 似乎不维护了，就用了这个</p>

<p><a href="https://iina.io/">IINA</a> ：媒体播放器</p>

<p><a href="https://getkap.co/">Kap</a> ：开源录屏工具</p>

<p>可转成 gif、mp4，支持插件</p>

<p>新 Mac 生成 gif 基本是秒级导出</p>

<p><a href="https://www.taskpaper.com/">TaskPaper</a> ：文本编辑器模式的任务管理工具（GTD）</p>

<p>经常用来管理工作上需要长期跟进的事，和滴答清单结合使用</p>

<p>Mindnode</p>

<p><a href="https://telegram.org/">Telegram</a> ：相对匿名安全的聊天软件</p>

<p><a href="https://cubox.pro/">Cubox</a> ：一站式信息收集、阅读、管理和回顾</p>

<p>碎片化阅读时代的文章、视频收集器</p>

<p><a href="https://kyome.io/runcat/index.html?lang=en">RunCat</a> ：在任务栏奔跑的猫</p>

<p>猫奔跑的速度会随着CPU使用率提升而越来越快（新 Mac 怎么开发都没看猫奔跑过）</p>

<p><a href="https://magnet.crowdcafe.com/">Magnet</a> ：窗口管理</p>

<p><a href="https://github.com/MonitorControl/MonitorControl">MonitorControl</a> ：显示器亮度调节</p>

<p><a href="https://apps.apple.com/jp/app/standup/id1439378680?l=en&amp;mt=12">StandUp</a> ：提醒站立</p>

<p><a href="https://medium.com/@mariociabarra/wifriedx-in-depth-look-at-yosemite-wifi-and-awdl-airdrop-41a93eb22e48">WiFriedX</a> ：关闭 AWDL/AirDrop，优化 M1 系列 Mac 的 Wifi 连接</p>

<p> </p>

<p><strong>开发使用</strong></p>

<p><a href="https://code.visualstudio.com/">VSCode</a> ：代码编辑器</p>

<p>通过自带的 <a href="https://code.visualstudio.com/docs/editor/settings-sync">Settings Sync</a> 功能一键同步</p>

<p><a href="https://github.com/git-up/GitUp">GitUp</a> ：Git GUI 软件</p>

<p>比 SourceTree 等软件要简洁，日常开发中基本没有做不了 GUI 操作</p>

<p><a href="https://www.sublimetext.com/">Sublime Text</a> ：文本编辑器</p>

<p>准确来讲，经常用这个编辑器快速做一些纪要</p>

<p>DataGrip：数据库开发工具</p>

<p>Goland：Gopher 开发工具</p>

<p>Dash：API 文档和代码片段管理</p>

<p>一直在用，找 API 文档和用法太方便了</p>

<p><a href="https://www.postman.com/">Postman</a> ：API 调试神器</p>

<p><a href="https://github.com/oldj/SwitchHosts">SwitchHosts</a> ：管理、切换多个hosts 方案的工具</p>

<p>QuickLook 预览插件</p>

<p><a href="http://www.sagtau.com/quicklookjson.html">quicklook-json</a></p>

<p><a href="https://github.com/toland/qlmarkdown">qlmarkdown</a></p>

<p><a href="https://github.com/Marginal/QLVideo">QLVideo</a></p>

<p> </p>

<p><strong>System Configuration</strong></p>

<p>触摸板三指拖拽</p>

<p>系统设置 → 辅助功能 → 指针控制 → 触控板选项 → 启用拖移（三指拖移）</p>

<p>退格键响应速度</p>

<p>系统设置 → 键盘，按键重复 调到最快、重复前延迟调最短</p>

<p><a href="https://gist.github.com/laispace/666dd7b27e9116faece6?permalink_comment_id=3686810#gistcomment-3686810">Github clone 加速</a></p>

<p>屏保 <a href="https://aerialscreensaver.github.io/">Aerial</a></p>

<p> </p>

<p><strong>Dev</strong></p>

<p>brew</p>

<p>on-my-zsh</p>

<p>fzf</p>

<p>autojump</p>

<p><a href="https://github.com/jesseduffield/lazygit">lazygit</a> ：命令行版 Git GUI</p>

<p><a href="https://github.com/BurntSushi/ripgrep">ripgrep</a> ：快速搜索文件/目录中包含的字符串</p>

<p>bat</p>

<p><a href="https://cli.github.com/">gh</a></p>

<p><a href="https://github.com/profclems/glab">glab</a></p>

<p><a href="https://github.com/TheYkk/git-switcher">git-switcher</a></p>

<p>graphviz</p>

<p>Node.js 相关</p>

<p>fnm</p>

<p>node 16 似乎用不了 node-gyp-build</p>

<p>Python 相关</p>

<p>pyenv</p>

<p>Java 相关</p>

<p><a href="https://github.com/jenv/jenv">jenv</a></p>

<p>Go</p>

<p>modd</p>

<p>tree</p>

<p>字体安装</p>

<p>brew install –cask font-fira-code font-jetbrains-mono</p>

<p> </p>

<p><strong>Plugins</strong></p>

<p>Alfred workflows</p>

<p><a href="https://github.com/jopemachine/alfred-chromium-workflow/">alfred-chromium-workflow</a> ：浏览器历史记录搜索</p>

<p>找一些页面很方便</p>

<p><a href="https://github.com/wensonsmith/YoudaoTranslator">YoudaoTranslator</a> ：有道搜索</p>

<p>平时直接 yd 中英文单词/句子 很方便</p>

<p><a href="https://github.com/ycjcl868/alfred-npmjs">NpmSearch</a> ：npm 包搜索</p>

<p>npm 包名 搜索一些包版本，同时支持任意 registry 源</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Apps]]></summary></entry></feed>